openapi: 3.0.3
info:
  version: 1.0.0
  title: GH Users
  description: GH Users information 
paths:
  /api/v1/users:
    x-router-controller: UserController
    get:
      description: Returns all users
      operationId: getUsers
      responses:
        200:
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/users/{username}:
    x-router-controller: UserController
    get:
      description: Returns a single user by its username
      operationId: findByusername
      parameters:
        - required: true
          name: username
          description: username of the user to fetch
          in: path
          schema:
            type: string
      responses:
        200:
          description: User found by username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      description: Creates an user
      operationId: createUser
      parameters:
        - required: true
          name: username
          description: username of the user to create
          in: path
          schema:
            type: string
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/v1/followersRanking/{username}:
      x-router-controller: UserController
      post:
        description: Starts a PageRank computation in the background and returns a computationId
        operationId: createPageRankComputation
        parameters:
          - required: true
            name: username
            description: Username of the user to compute PageRank for
            in: path
            schema:
              type: string
          - required: false
            name: depth
            description: Depth of calculation to perform (default = 3)
            in: query
            schema:
              type: integer
          - required: false
            name: dampingfactor
            description: Damping factor for the PageRank algorithm (default = 0.85)
            in: query
            schema:
              type: number
        responses:
          201:
            description: Computation started successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    computationId:
                      type: string
  /api/v1/followersRanking/{computationId}:
    x-router-controller: UserController
    get:
      description: Returns the followersRanking results from computationId 
      operationId: getFollowersRankingByComputationId
      parameters:
        - required: true
          name: computationId
          description: computationId of the followersRanking computation
          in: path
          schema:
            type: string
      responses:
        200:
          description: User followers ranking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/followersRanking'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    followersRanking:
      type: object
      properties:
        status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, FAILED]
        params:
          type: object
          properties:
            username:
              type: string
            dampingfactor:
              type: number
            depth:
              type: integer
          required:
            - username
            - dampingfactor
            - depth
        result:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              score:
                type: number
          nullable: true
      required:
        - status
        - params
    user:
        type: object
        required:
          - username
          - status
          - bio
          - avatarUrl
          - followers
          - following
          - issues
        properties:
          username:
            type: string
          status:
            type: string
          bio:
            type: string
          avatarUrl:
            type: string
            format: uri
          followers:
            type: array
            items:
              type: string
          following:
            type: array
            items:
              type: string
          issues:
            type: array
            items:
              type: object
              required:
                - title
                - state
                - createdAt
              properties:
                title:
                  type: string
                state: 
                  type: string
                  enum: [OPEN, CLOSED]
                createdAt:
                  type: string
                  format: date-time

    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      additionalProperties: true